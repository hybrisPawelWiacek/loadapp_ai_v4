# **LoadApp.AI Workspace-Specific Rules**

## 0 project structure
UPDATE PROJECT STRUCTURE regularly:


### current structure:
.
├── README.md
├── alembic.ini
├── backend
│   ├── __init__.py
│   ├── api
│   │   └── routes
│   ├── app.py
│   ├── config.py
│   ├── domain
│   │   ├── __init__.py
│   │   ├── entities
│   │   │   ├── __init__.py
│   │   │   ├── business.py
│   │   │   ├── cargo.py
│   │   │   ├── location.py
│   │   │   ├── route.py
│   │   │   └── transport.py
│   │   └── services
│   │       ├── cost_service.py
│   │       ├── offer_service.py
│   │       ├── route_service.py
│   │       └── transport_service.py
│   └── infrastructure
│       ├── __init__.py
│       ├── adapters
│       │   ├── google_maps_adapter.py
│       │   ├── openai_adapter.py
│       │   └── toll_rate_adapter.py
│       ├── container.py
│       ├── database.py
│       ├── external_services
│       │   ├── __init__.py
│       │   ├── exceptions.py
│       │   ├── google_maps_service.py
│       │   ├── openai_service.py
│       │   └── toll_rate_service.py
│       ├── logging.py
│       ├── models
│       │   ├── business_models.py
│       │   ├── cargo_models.py
│       │   ├── route_models.py
│       │   └── transport_models.py
│       ├── repositories
│       │   ├── base.py
│       │   ├── business_repository.py
│       │   ├── cargo_repository.py
│       │   ├── route_repository.py
│       │   └── transport_repository.py
│       └── services
├── docs
│   └── TESTING_SETUP.MD
├── frontend
│   ├── __init__.py
│   └── streamlit_app.py
├── g_docs
│   ├── business_req.md
│   ├── domain_layer_cons.md
│   ├── implementation_gameplan.md
│   └── prd.md
├── k_docs
├── loadapp.db
├── migrations
│   ├── __init__.py
│   ├── env.py
│   ├── script.py.mako
│   └── versions
│       ├── 20231228_initial.py
│       └── __init__.py
├── pytest.ini
├── requirements.txt
├── scripts
│   ├── init_db.py
│   ├── run_tests.sh
│   ├── start_backend.sh
│   └── start_frontend.sh
├── temp
│   ├── google_maps_service.py
│   ├── openai_service.py
│   └── toll_rate_service.py
├── template.env
└── tests
    ├── __init__.py
    ├── backend
    │   ├── __init__.py
    │   ├── domain
    │   │   └── entities
    │   │       ├── test_cargo.py
    │   │       ├── test_route.py
    │   │       └── test_transport.py
    │   ├── external_services
    │   │   ├── test_google_maps_service.py
    │   │   ├── test_openai_service.py
    │   │   └── test_toll_rate_service.py
    │   ├── infrastructure
    │   │   ├── models
    │   │   └── repositories
    │   ├── test_app.py
    │   └── test_google_maps_service.py
    ├── conftest.py
    └── frontend
        ├── __init__.py
        └── test_streamlit_app.py

## 1. Document Reference Guide
- **g_docs/prd.md** → Core transport manager flow and implementation details
- **g_docs/business_req.md** → Transport manager flow & business requirements
- **g_docs/domain_layer_cons.md** → Domain model design and entities
- **g_docs/implementation_gameplan.md** → Implementation strategy and phases

---

## 2. Core Development Principles
- Adhere to **clean architecture** per `g_docs/implementation_gameplan.md`
- Implement domain models as specified in `g_docs/domain_layer_cons.md`
- Follow transport flow defined in `g_docs/business_req.md`

---

## 3. Implementation Focus
- Primary references for features: **g_docs/business_req.md**
  - Route & cargo input phase
  - Route calculation with compliance checks
  - Empty driving (200km/4h)
  - Timeline events and visualization
- Technical structure: **g_docs/implementation_gameplan.md**
  - Domain layer implementation
  - Core domain entities
  - Transport and business domains
  - Route domain with timeline events

---

## 4. Code Organization
- Follow **domain patterns** from `g_docs/domain_layer_cons.md`:
  - Transport configuration (TransportType, Specifications)
  - Runtime entities
  - Entity relationships
- Follow **implementation phases** from `g_docs/implementation_gameplan.md`:
  - Domain layer structure
  - Entity implementations
  - Service organization
  - Business logic flow

---

## 5. Checklist to Prevent Common Mistakes
Before creating files:  
1. **Search** for existing implementations using `ls` and `find`  
2. **Check** project structure using `ls -R`  
3. **Review** related files by examining the directory  
4. **Verify** correct directory based on project conventions  

**Project Structure Rules**:  
- Domain code → `backend/domain/`  
- API endpoints → `backend/api/`  
- Infrastructure code → `backend/infrastructure/`  
- Frontend code → `frontend/`  

**File Organization Guidelines**:  
- Keep related code in single files when possible  
- Follow the established module structure  
- Use `__init__.py` for package organization  
- Place tests in corresponding `test` directories  

**Before Implementation**:  
- Review existing implementations  
- Check for duplicate functionality  
- Follow the project's architectural patterns  
- Verify the correct location based on clean architecture  

---

## 6. Testing Best Practices
- Run tests with **pytest** using `pytest [test_file] -v`
  - Avoid `python -m pytest` or other variations  
- **Before modifying code**:
  1. Run tests for a **baseline**  
  2. Understand **why** tests fail  
  3. Coordinate changes to both implementation & tests  
- When tests fail:
  1. Check if failure is due to:
     - Implementation changes → update tests
     - Test environment setup → fix mocks/fixtures
     - Actual bugs → get approval to fix code
  2. Update code & tests **together**  
  3. Verify that all test cases remain **valid**  
- Maintain test coverage **above 60%**  
- Keep test fixtures updated with current implementation  

---

## 7. SQLAlchemy Model Guidelines
- Avoid using reserved names:
  - `metadata` (SQLAlchemy reserved)
  - `query` (Flask-SQLAlchemy reserved)
  - `session` (SQLAlchemy reserved)
- **Naming conventions**:
  - Class names → **PascalCase**  
  - Column names → **snake_case**  
  - Suffix model classes with "Model" when in infrastructure layer  
- Keep models in dedicated files:
  - Base models in `backend/infrastructure/models.py`
  - Complex models in `backend/infrastructure/models/` (one file per model if needed)
- Always define **explicit table names**:
  ```python
  __tablename__ = 'my_table_name'
  ```

---

## 8. Common Pitfalls Prevention
### Database Type Compatibility
- **Always** confirm SQLite compatibility before implementing models  
- Use string representation for UUIDs (`Column(String(36))`)  
- Store datetimes with timezone info (`Column(DateTime(timezone=True))`)  
- Use appropriate numeric types (`Integer`, `Float`)  

**Before Implementation**:
1. Review SQLite **type limitations**  
2. Check existing type conversion patterns  
3. **Test** data type handling in isolation  
4. Document any special type handling requirements  

**Code Review Checklist**:
1. Verify UUID fields stored as **strings**  
2. Confirm datetime fields include **timezone info**  
3. Check numeric type **precision** requirements  
4. Validate foreign key **type consistency**  
5. Test type conversions in both directions  

---

## 9. Database Design Rules
- **SQLite Compatibility**:
  - Store UUIDs as **TEXT**  
  - Store datetime fields in **UTC** (with timezone info)  
  - Use **INTEGER** for boolean (0 or 1)  
  - Use **REAL** for floating-point  
  - Avoid complex JSON in indexed columns  

- **Data Type Conversions**:
  - Always convert UUIDs → **strings** before storing  
  - Always store datetimes in **UTC**  
  - Include **timezone** info in datetime fields  
  - Handle booleans as 0/1 in SQLite  

- **Model Implementation**:
  - `Column(String(36))` for UUID  
  - `Column(DateTime(timezone=True))` for datetime  
  - Document type conversions in model docstrings  
  - Add validators where necessary  

---


## 10. Python & Dependencies Management
- **Python Version Compatibility**:
  - Use Python **3.12** for best package compatibility
  - **Avoid** Python 3.13 (many packages not yet compatible)
  - Keep virtual environment isolated with `venv`

- **Pydantic Version Management**:
  - Use Pydantic **2.5.2** with Python 3.12
  - Pydantic-core requires specific Python version compatibility
  - When upgrading Python, check Pydantic compatibility first

- **Virtual Environment Best Practices**:
  - Create new venv: `python3.12 -m venv venv`
  - Activate: `source venv/bin/activate`
  - Upgrade pip: `pip install --upgrade pip`
  - Install requirements: `pip install -r requirements.txt`
  - If installation fails, try installing packages one by one

- **Dependencies Troubleshooting**:
  1. Check Python version compatibility
  2. Verify package version constraints
  3. Look for platform-specific issues (macOS, Linux, Windows)
  4. Consider package build dependencies (rust, C extensions)
  5. Monitor for conflicting dependencies

- **Package Version Control**:
  - Pin exact versions in `requirements.txt`
  - Document any version constraints
  - Test dependency upgrades in isolation
  - Keep track of security updates

## 2. Version Control & Commits

1. After each successful feature development (confirmed by me or by successful test run pass), you have to remind me to do a git commit!
2. Create atomic commits for completed/approved features.
3. Use conventional commit messages:
   - `feat`: new features
   - `fix`: bug fixes
   - `docs`: documentation changes
   - `refactor`: code restructuring
4. Include relevant ticket/issue numbers.
5. Provide a short summary of significant changes.
6. Remote Repository:
   - URL: https://github.com/hybrisPawelWiacek/loadapp_ai_v4
   - Main branch: main
   - Push changes after commits: `git push origin main`
   - For new features: create feature branches from main

## 11. Port Usage & Service Configuration
- **Never** use port **5000** for backend services (conflicts with Apple AirTunes)  
- **Default ports**:
  - Backend (Flask): **5001**
  - Frontend (Streamlit): **8501**
- Always check for port conflicts before starting services  
- Log port configuration in startup messages  

---